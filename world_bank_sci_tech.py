# -*- coding: utf-8 -*-
"""World_bank_sci_tech.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18QIkhv-O1BJD7kd2bvaaOtYFV5duEHSc

### **World Bank Science and Technology Data Analysis**

## Importing the data
"""

import pandas as pd

st_data_2018 = pd.read_csv("/content/science_tech_2018.csv")
st_data_2018.head()

st_data_2018.shape

st_data_2018.size

st_data_2018.columns

import pandas as pd

st_data_2009 = pd.read_csv("/content/science_tech_2009.csv")
st_data_2009.head()

st_data_2009.size

st_data_2009.columns

st_data_2009.shape

"""### Cleaning the data

## Missing data
"""

st_data_2018.isna().sum()

st_data_2018_clean =st_data_2018.dropna()
st_data_2018_clean.shape

st_data_2009.isna().sum()

st_data_2009_clean = st_data_2009.dropna()
st_data_2009_clean.shape

"""### Exploratory Data Analysis

### Descriptive Statistics
"""

pd.set_option("display.float_format", lambda x: '%.3f' %x)
st_data_2018_clean.describe().style.format("{:,.0f}")

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

sns.boxplot(x=st_data_2018_clean['High-technology exports (% of manufactured exports)'])

pd.set_option("display.float_format", lambda x: '%.3f' %x)
st_data_2009_clean.describe().style.format("{:,.0f}")

sns.boxplot(x=st_data_2009_clean['High-technology exports (% of manufactured exports)'])

"""### Outliers"""

columns = st_data_2018_clean.columns

for i in range(1,len(columns)):
  fig= plt.figure(figsize=(10,5))
  sns.boxplot(x=st_data_2018_clean[columns[i]])

articles_max = st_data_2018_clean['Scientific and technical journal articles'].max()

st_data_2018_clean[st_data_2018_clean['Scientific and technical journal articles']==articles_max]

st_data_2018_clean[st_data_2018_clean['Scientific and technical journal articles']>60000]

columns = st_data_2009_clean.columns

for i in range(1,len(columns)):
  fig= plt.figure(figsize=(10,5))
  sns.boxplot(x=st_data_2009_clean[columns[i]])

articles_max = st_data_2009_clean['Scientific and technical journal articles'].max()

st_data_2009_clean[st_data_2009_clean['Scientific and technical journal articles']==articles_max]

"""### Exploring Relationship"""

st_data_2018_clean.corr(method='pearson').style.background_gradient(cmap='viridis')

st_data_2018_clean.corr(method='spearman').style.background_gradient(cmap='viridis')

st_data_2018_clean.plot.scatter(x='Scientific and technical journal articles',y='Patent applications, nonresidents')

st_data_2018_nonUS = st_data_2018_clean[st_data_2018_clean['Country Name'] !='United State']

st_data_2018_nonUS.plot.scatter(x='Scientific and technical journal articles',y='Patent applications, nonresidents')

st_data_2009_clean.corr(method='pearson').style.background_gradient(cmap='viridis')

st_data_2009_clean.corr(method='spearman').style.background_gradient(cmap='viridis')

st_data_2009_clean.plot.scatter(x='High-technology exports (% of manufactured exports)',y='Patent applications, nonresidents')

"""### T-TEST"""

import scipy.stats as stats

a = st_data_2009_clean['Patent applications, residents']
b = st_data_2018_clean['Patent applications, residents']
stats.ttest_ind(a,b)

for i in range(1,len(columns)):
  a =st_data_2009_clean[columns[i]]
  b =st_data_2018_clean[columns[i]]
  print(columns[i])
  statistics, pvalue = stats.ttest_ind(a,b)
  print("statistics: %s p-value: %s" %(statistics,pvalue))
  if pvalue < 0.05:
    print("Significant")
  else:
      print("Not Significant")